/*
* This header is generated by classdump-dyld 1.0
* on Saturday, March 2, 2019 at 4:20:31 AM Central European Standard Time
* Operating System: Version 12.1.2 (Build 16C104)
* Image Source: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <CoreFoundation/CoreFoundation-Structs.h>
#import <libobjc.A.dylib/_DKDeduping.h>
#import <libobjc.A.dylib/CKRecordValue.h>
#import <libobjc.A.dylib/NSCopying.h>
#import <libobjc.A.dylib/NSSecureCoding.h>

@class NSString;

@interface NSDate : NSObject <_DKDeduping, CKRecordValue, NSCopying, NSSecureCoding>

@property (nonatomic,readonly) BOOL isToday; 
@property (nonatomic,readonly) BOOL isYesterday; 
@property (nonatomic,readonly) NSString * shortFormattedDate; 
@property (nonatomic,readonly) NSString * briefFormattedDate; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (readonly) double timeIntervalSinceReferenceDate; 
+(id)modificationDateForNoteBeingEdited;
+(long long)daysSpannedFromStartDate:(id)arg1 toEndDate:(id)arg2 allDay:(BOOL)arg3 inCalendar:(id)arg4 ;
+(id)CalDateForNow;
+(id)_nowComponents;
+(id)_todayComponents;
+(id)CalDateForBeginningOfToday;
+(id)_tomorrowComponents;
+(id)CalDateForEndOfToday;
+(id)CalDateForBeginningOfTomorrow;
+(id)CalDateForEndOfTomorrow;
+(id)nextRoundedHour;
+(id)CalSimulatedDateForNow;
+(id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3 ;
+(id)mf_copyDateInCommonFormatsWithString:(id)arg1 ;
+(id)mf_copyLenientDateInCommonFormatsWithString:(id)arg1 ;
+(id)fm_dateFromEpoch:(long long)arg1 ;
+(id)_geo_calendar;
+(id)geo_dateWithJulianDay:(double)arg1 ;
+(id)geo_dateWithJulianEphemerisDay:(double)arg1 ;
+(int)daysSince1970;
+(id)dateForDaysSince1970:(int)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 date:(id)arg2 locale:(id)arg3 ;
+(id)dateWithNaturalLanguageString:(id)arg1 ;
+(id)dateWithNaturalLanguageString:(id)arg1 locale:(id)arg2 ;
+(id)dateWithString:(id)arg1 ;
+(id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
+(id)dateWithDate:(id)arg1 ;
+(BOOL)supportsSecureCoding;
+(id)allocWithZone:(NSZone*)arg1 ;
+(id)date;
+(double)timeIntervalSinceReferenceDate;
+(id)dateWithTimeIntervalSinceNow:(double)arg1 ;
+(id)dateWithTimeIntervalSince1970:(double)arg1 ;
+(id)distantPast;
+(id)distantFuture;
+(id)dateWithTimeIntervalSinceReferenceDate:(double)arg1 ;
-(id)plistArchiveWithCPLArchiver:(id)arg1 ;
-(id)initWithCPLArchiver:(id)arg1 ;
-(id)nextDateMatchingTimeComponents;
-(id)localizedShortTimeInTimeZone:(id)arg1 ;
-(id)stringFromDHCPLeaseExpirationDateWithFormatString:(id)arg1 ;
-(BOOL)isTodayWithCalendar:(id)arg1 ;
-(id)aaui_dayComponentsWithCalendar:(id)arg1 ;
-(BOOL)aaui_isTodayWithCalendar:(id)arg1 ;
-(id)mf_replyPrefixForSender:(id)arg1 ;
-(id)mf_descriptionForMimeHeaders;
-(id)ml_stringValueForSQL;
-(void)ml_bindToSQLiteStatement:(sqlite3_stmtRef)arg1 atPosition:(int)arg2 ;
-(NSString *)shortFormattedDate;
-(NSString *)briefFormattedDate;
-(BOOL)isYesterday;
-(BOOL)isToday;
-(BOOL)isEarlierThanDate:(id)arg1 ;
-(BOOL)isLaterThanDate:(id)arg1 ;
-(id)dedup;
-(id)dk_localtimeString;
-(double)timeSinceMidnight:(id*)arg1 ;
-(id)floorDateWithTotalSlotsInDay:(int)arg1 ;
-(int)slotFromMidnightWithTotalSlotsInDay:(int)arg1 ;
-(id)cd_dateWithCeilingForAlignment:(double)arg1 withOffset:(double)arg2 inTimeZone:(id)arg3 ;
-(id)cd_dateWithFloorForAlignment:(double)arg1 ;
-(id)cd_dateWithCeilingForAlignment:(double)arg1 ;
-(id)cd_dateWithFloorForAlignment:(double)arg1 withOffset:(double)arg2 inTimeZone:(id)arg3 ;
-(id)_intents_readableDescriptionForLanguage:(id)arg1 ;
-(id)dateForDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(id)dateForEndOfDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(id)dateInTimeZone:(id)arg1 fromTimeZone:(id)arg2 ;
-(id)dateForDayInTimeZone:(id)arg1 ;
-(id)ek_ios_dateForEndOfDayInTimeZone:(id)arg1 ;
-(id)localizedStringWithFormat:(id)arg1 timeZone:(id)arg2 ;
-(id)localizedStringWithFormat:(id)arg1 ;
-(long long)yearInCalendar:(id)arg1 ;
-(id)dateByAddingMonths:(long long)arg1 inCalendar:(id)arg2 ;
-(long long)hourInCalendar:(id)arg1 ;
-(id)dateRemovingTimeComponentsInCalendar:(id)arg1 ;
-(id)dateByAddingCalSimulatedOffset;
-(id)dateOnlyComponentsInCalendar:(id)arg1 ;
-(id)allComponentsInCalendar:(id)arg1 ;
-(long long)weekdayInCalendar:(id)arg1 ;
-(id)timeOnlyComponentsInCalendar:(id)arg1 ;
-(BOOL)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(id)roundToCurrentWeekInCalendar:(id)arg1 withFirstWeekdayIndex:(long long)arg2 ;
-(long long)minuteInCalendar:(id)arg1 ;
-(id)dateByAddingMinutes:(long long)arg1 inCalendar:(id)arg2 ;
-(id)CalDateRoundedDownToNearestMinuteIncrement:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateRoundedToHourOnSameDayInCalendar:(id)arg1 ;
-(id)localizedDateStringWithTemplate:(id)arg1 ;
-(long long)weekInCalendar:(id)arg1 ;
-(id)_stringWithUseAbbreviatedFormats:(BOOL)arg1 lowerCase:(BOOL)arg2 ;
-(id)localizedWeekdayMonthDayStringShortened:(BOOL)arg1 ;
-(BOOL)CalIsBetweenStartDate:(id)arg1 endDate:(id)arg2 ;
-(id)dateBySubtractingCalSimulatedOffset;
-(id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2 ;
-(long long)monthInCalendar:(id)arg1 ;
-(long long)dayInCalendar:(id)arg1 ;
-(long long)secondInCalendar:(id)arg1 ;
-(id)dateByAddingWeeks:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingYears:(long long)arg1 inCalendar:(id)arg2 ;
-(id)roundSecondsDownInCalendar:(id)arg1 ;
-(id)roundToCurrentDayInCalendar:(id)arg1 ;
-(id)roundToCurrentMondayInCalendar:(id)arg1 ;
-(id)roundToCurrentMonthInCalendar:(id)arg1 ;
-(id)roundToCurrentYearInCalendar:(id)arg1 ;
-(BOOL)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isSameWeekAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isSameYearAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(BOOL)isTodayInCalendar:(id)arg1 ;
-(id)dateRoundedDownToNearestFiveMinutesInCalendar:(id)arg1 ;
-(id)dateRoundedToStartOfNextDayInCalendar:(id)arg1 ;
-(void)printComparisonToDate:(id)arg1 ;
-(id)localizedMonthShortened:(BOOL)arg1 ;
-(id)localizedMonthAndYearStringShortened:(BOOL)arg1 ;
-(id)localizedMonthAndDayStringShortened:(BOOL)arg1 ;
-(id)localizedYearMonthAndDayStringShortened:(BOOL)arg1 ;
-(id)localizedWeekdayMonthDayYearStringShortened:(BOOL)arg1 ;
-(id)localizedWeekdayMonthYearStringShortened:(BOOL)arg1 ;
-(id)localizedWeekNumber;
-(BOOL)CalIsAfterDate:(id)arg1 ;
-(id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1 ;
-(BOOL)CalIsBeforeDate:(id)arg1 ;
-(BOOL)CalIsAfterOrSameAsDate:(id)arg1 ;
-(id)localizedRelativeDateStringShortened:(BOOL)arg1 ;
-(id)timeStringAlwaysIncludeMinutes:(BOOL)arg1 ;
-(BOOL)CalIsBeforeOrSameAsDate:(id)arg1 ;
-(id)dateByAddingHours:(long long)arg1 inCalendar:(id)arg2 ;
-(id)dateByAddingDays:(long long)arg1 inCalendar:(id)arg2 ;
-(id)roundSecondsAndMinutesUpInCalendar:(id)arg1 ;
-(id)roundSecondsAndMinutesDownInCalendar:(id)arg1 ;
-(BOOL)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2 ;
-(long long)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2 ;
-(id)localizedRelativeDateStringShortened:(BOOL)arg1 lowercase:(BOOL)arg2 ;
-(BOOL)isBeforeDate:(id)arg1 ;
-(BOOL)isAfterDate:(id)arg1 ;
-(id)dateAtHour:(unsigned long long)arg1 minute:(unsigned long long)arg2 second:(unsigned long long)arg3 inTimeZone:(id)arg4 ;
-(id)dateForStartOfDayInTimeZone:(id)arg1 ;
-(void)_performBlockBehindDispatchSync:(/*^block*/id)arg1 inTimeZone:(id)arg2 ;
-(id)dateForEndOfDayInTimeZone:(id)arg1 ;
-(id)dateWithoutTimeComponentsInTimeZone:(id)arg1 ;
-(BOOL)isWholeHour;
-(BOOL)mf_isEarlierThanDate:(id)arg1 ;
-(BOOL)mf_isLaterThanDate:(id)arg1 ;
-(long long)fm_epoch;
-(id)fm_epochObject;
-(id)initWithXPCEncoding:(id)arg1 ;
-(id)copyXPCEncoding;
-(id)ak_serverFriendlyString;
-(double)geo_julianDay;
-(double)geo_hoursAndMinutes;
-(double)geo_julianEphemerisDay;
-(id)bs_dateByAddingDays:(long long)arg1 ;
-(BOOL)isBeforeDate:(id)arg1 ;
-(BOOL)isAfterDate:(id)arg1 ;
-(int)daysSince1970;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(long long)_web_compareDay:(id)arg1 ;
-(id)_web_RFC1123DateString;
-(BOOL)_web_isToday;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(Class)classForCoder;
-(id)dateWithCalendarFormat:(id)arg1 timeZone:(id)arg2 ;
-(id)descriptionWithCalendarFormat:(id)arg1 timeZone:(id)arg2 locale:(id)arg3 ;
-(BOOL)isInToday;
-(BOOL)isInTomorrow;
-(BOOL)isInYesterday;
-(BOOL)isInSameDayAsDate:(id)arg1 ;
-(BOOL)isEqual:(id)arg1 toUnitGranularity:(unsigned long long)arg2 ;
-(long long)compare:(id)arg1 toUnitGranularity:(unsigned long long)arg2 ;
-(BOOL)isNSDate__;
-(unsigned long long)_cfTypeID;
-(id)addTimeInterval:(double)arg1 ;
-(id)initWithDate:(id)arg1 ;
-(id)descriptionWithLocale:(id)arg1 ;
-(id)initWithTimeIntervalSince1970:(double)arg1 ;
-(BOOL)isEqual:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(id)initWithCoder:(id)arg1 ;
-(id)initWithString:(id)arg1 ;
-(unsigned long long)hash;
-(NSString *)description;
-(id)copyWithZone:(NSZone*)arg1 ;
-(long long)compare:(id)arg1 ;
-(double)timeIntervalSince1970;
-(double)timeIntervalSinceNow;
-(double)timeIntervalSinceReferenceDate;
-(BOOL)isEqualToDate:(id)arg1 ;
-(id)initWithTimeIntervalSinceReferenceDate:(double)arg1 ;
-(double)timeIntervalSinceDate:(id)arg1 ;
-(id)laterDate:(id)arg1 ;
-(id)earlierDate:(id)arg1 ;
-(id)dateByAddingTimeInterval:(double)arg1 ;
-(id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2 ;
-(id)initWithTimeIntervalSinceNow:(double)arg1 ;
@end

