//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "SUKeybagInterfaceObserver-Protocol.h"
#import "SUManagedDeviceManagerDelegate-Protocol.h"
#import "SUNetworkObserver-Protocol.h"

@class MAAsset, NSDate, NSDictionary, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSTimer, SUAutoInstallFailureNotification, SUAutoUpdatePasscodePolicy, SUCoreReporter, SUDownload, SUInstallPolicy, SUManagedDeviceManager, SUOperationProgress, SUSFollowUpController, SUScanOptions, SUState;
@protocol OS_dispatch_queue, SUManagerDelegate;

@interface SUManager : NSObject <SUKeybagInterfaceObserver, SUNetworkObserver, SUManagedDeviceManagerDelegate>
{
    id <SUManagerDelegate> _delegate;
    SUState *_state;
    _Bool _foreground;
    SUScanOptions *_autoScanOptions;
    _Bool _scanning;
    NSMutableArray *_scanRequests;
    _Bool _managedScanInProgress;
    MAAsset *_assetToDownloadFromLastScan;
    NSDate *_assetToDownloadFromLastScanReleaseDate;
    _Bool _downloading;
    MAAsset *_downloadAsset;
    SUDownload *_download;
    SUOperationProgress *_downloadProgressSnapshot;
    NSTimer *_documentationDownloadTimer;
    _Bool _preparing;
    _Bool _installing;
    _Bool _installed;
    _Bool _isInstallTonight;
    _Bool _isInstallTonightScheduled;
    NSHashTable *_observers;
    SUAutoInstallFailureNotification *_autoSUFailureNotification;
    NSMutableDictionary *_unlockCallbacks;
    SUManagedDeviceManager *_managedDeviceManager;
    SUInstallPolicy *_installPolicy;
    SUAutoUpdatePasscodePolicy *_passcodePolicy;
    NSDictionary *_mandatoryUpdateDictionary;
    NSString *_sessionID;
    NSString *_potentialNextSessionID;
    NSObject<OS_dispatch_queue> *_autoUpdateQueue;
    NSDate *_lastStashbagPersistedDate;
    SUSFollowUpController *_followUpController;
    SUCoreReporter *_coreReporter;
}

+ (id)stringForAssetType:(id)arg1;
+ (id)sharedInstance;
+ (void)initialize;
@property(retain, nonatomic) NSString *potentialNextSessionID; // @synthesize potentialNextSessionID=_potentialNextSessionID;
@property(retain, nonatomic) NSString *sessionID; // @synthesize sessionID=_sessionID;
@property(retain, nonatomic) NSDate *lastStashbagPersistedDate; // @synthesize lastStashbagPersistedDate=_lastStashbagPersistedDate;
@property(retain, nonatomic) SUCoreReporter *coreReporter; // @synthesize coreReporter=_coreReporter;
@property(retain, nonatomic) SUSFollowUpController *followUpController; // @synthesize followUpController=_followUpController;
@property(retain, nonatomic) SUAutoUpdatePasscodePolicy *passcodePolicy; // @synthesize passcodePolicy=_passcodePolicy;
@property(retain, nonatomic) SUInstallPolicy *installPolicy; // @synthesize installPolicy=_installPolicy;
@property(retain, nonatomic) SUManagedDeviceManager *managedDeviceManager; // @synthesize managedDeviceManager=_managedDeviceManager;
@property(retain, nonatomic) NSDate *assetToDownloadFromLastScanReleaseDate; // @synthesize assetToDownloadFromLastScanReleaseDate=_assetToDownloadFromLastScanReleaseDate;
@property(retain, nonatomic) MAAsset *assetToDownloadFromLastScan; // @synthesize assetToDownloadFromLastScan=_assetToDownloadFromLastScan;
@property(retain, nonatomic) MAAsset *downloadAsset; // @synthesize downloadAsset=_downloadAsset;
@property(nonatomic) _Bool isInstallTonightScheduled; // @synthesize isInstallTonightScheduled=_isInstallTonightScheduled;
@property(nonatomic) _Bool isInstallTonight; // @synthesize isInstallTonight=_isInstallTonight;
@property(nonatomic, getter=isInstalling) _Bool installing; // @synthesize installing=_installing;
@property(nonatomic, getter=isPreparing) _Bool preparing; // @synthesize preparing=_preparing;
@property(retain, nonatomic) SUDownload *download; // @synthesize download=_download;
@property(nonatomic, getter=isForeground) _Bool foreground; // @synthesize foreground=_foreground;
@property(retain, nonatomic) SUState *state; // @synthesize state=_state;
@property(nonatomic) id <SUManagerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)keybagInterface:(id)arg1 passcodeLockedStateDidChange:(_Bool)arg2;
- (void)managedDeviceDelayPeriodChanged:(id)arg1;
- (void)_describeAndReportEvent:(id)arg1;
- (void)reportPostponedEvent:(id)arg1 withStatus:(id)arg2;
- (void)_reportDownloadedEvent:(id)arg1;
- (void)_reportAvailableEvent;
- (void)_addRecordingServiceBaseURLToOptions:(id)arg1;
@property(retain, nonatomic) NSDictionary *mandatoryUpdateDictionary; // @synthesize mandatoryUpdateDictionary=_mandatoryUpdateDictionary;
- (id)delayEndDate;
- (_Bool)isDelayingUpdates;
- (_Bool)shouldIgnoreForAutoInstall;
- (_Bool)isAutoUpdateEnabled;
- (_Bool)createInstallationKeybag:(id)arg1 forUnattendedInstall:(_Bool)arg2;
- (id)slaVersion;
- (void)updateInstallPolicyAutoUpdateEnabled:(_Bool)arg1;
- (void)updateInstallPolicyType:(unsigned long long)arg1;
- (id)newInstallTonightConfig;
- (_Bool)installUpdateWithOptions:(id)arg1 error:(id *)arg2;
- (_Bool)installUpdate:(id *)arg1;
- (void)autoSUFailedWithError:(id)arg1;
- (_Bool)_isUpdateReadyForInstallation:(id *)arg1 forceDiskCleanupIfNeeded:(_Bool)arg2 ShouldRetry:(_Bool *)arg3;
- (_Bool)isUpdateReadyForInstallation:(id *)arg1 shouldRetry:(_Bool *)arg2;
- (void)operatorBundleChanged;
- (void)_setUMEventFields:(id)arg1 reason:(id)arg2;
- (void)_setVerifyExclusions:(id)arg1;
- (void)_clearKeybagStash;
- (void)_verifyAndPrepareUpdate;
- (void)_cleanupPreviousDownload:(_Bool)arg1;
- (void)_cleanupPreviousDownload;
- (void)_cleanupAllSoftwareUpdateAssets;
- (void)_purgeSUAsset:(id)arg1;
- (void)_clearUnlockCallbacks;
- (void)removeUnlockCallback:(id)arg1;
- (void)addUnlockCallback:(SEL)arg1 forKey:(id)arg2;
- (id)unlockCallbacks;
- (void)_downloadFinished;
- (void)_downloadFailedWithError:(id)arg1;
- (void)_updateNormalizedDownloadProgress;
- (void)_updateNormalizedDownloadProgressAndNotifyDelegate;
- (void)_notePhaseCompleted:(id)arg1;
- (void)_changeDownloadPhase:(id)arg1 progress:(float)arg2 timeRemaining:(double)arg3;
- (void)_changeDownloadPhase:(id)arg1 progress:(float)arg2;
- (void)_updateDownloadProgress:(id)arg1 withState:(long long)arg2;
- (void)_verifyAndPrepareWhenReady;
- (void)_verifyAndPrepareOnUnlock;
- (void)_doUnlockEvents;
- (void)persistStashOnUnlock;
- (void)_updateDownloadStatusForBrainAssetState:(id)arg1;
- (_Bool)_isPhase:(id)arg1 beforePhase:(id)arg2;
- (_Bool)_isPhase:(id)arg1 afterPhase:(id)arg2;
- (int)_orderForPhase:(id)arg1;
- (_Bool)_shouldSendUpdatedProgressToDelegate;
- (void)_snapshotProgress;
- (_Bool)__startUpdateAssetDownload:(_Bool)arg1;
- (_Bool)__startBrainAssetDownload;
- (_Bool)startDownloadWithMetadata:(id)arg1 error:(id *)arg2;
- (_Bool)startDownload:(id *)arg1;
- (_Bool)_reapplyExistingDownloadPolicyIfDownloadable:(_Bool)arg1;
- (void)_updateAssetDownloadOptions;
- (int)_downloadPriority;
- (_Bool)updateDownloadMetadata:(id)arg1 error:(id *)arg2;
- (void)_updateLastSavedDownloadsMetadata:(id)arg1;
- (void)_updateLastSavedDownloadPhase:(id)arg1;
- (void)resumeDownload:(id *)arg1;
- (_Bool)pauseDownload:(id *)arg1;
- (_Bool)_killDownload:(_Bool)arg1 userRequested:(_Bool)arg2 error:(id *)arg3;
- (_Bool)purgeDownloadUserRequested:(_Bool)arg1 error:(id *)arg2;
- (_Bool)_cancelDownload:(_Bool)arg1 userRequested:(_Bool)arg2 error:(id *)arg3;
- (_Bool)cancelDownloadUserRequested:(_Bool)arg1 error:(id *)arg2;
- (_Bool)isDownloadHalted;
- (void)_sendDownloadInvalidatedForNewDescriptor:(id)arg1;
- (void)_remoteQueryWithMatcher:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_documentationDownloadTimeout:(id)arg1;
- (void)_scheduleDocumentationDownloadTimeoutTimer:(id)arg1;
- (void)_invalidateDocumentationDownloadTimeoutTimer;
- (void)_fetchDocumentationFromSoftwareUpdateAsset:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_doScanWithInfo:(id)arg1 completion:(CDUnknownBlockType)arg2;
@property(nonatomic, getter=isScanning) _Bool scanning; // @synthesize scanning=_scanning;
- (void)scanForUpdates:(id)arg1 complete:(CDUnknownBlockType)arg2;
- (void)_handleScanError:(id)arg1;
- (void)_setupManualDownloadPolicyPeriodIfNecessary:(id)arg1 fromDate:(id)arg2 save:(_Bool)arg3;
- (void)notifyScanDidComplete:(id)arg1 error:(id)arg2;
- (void)notifyScanRequestDidFinish:(id)arg1 update:(id)arg2 error:(id)arg3;
- (void)notifyScanRequestDidStart:(id)arg1;
- (void)dismissAutoUpdateBanner;
- (void)_presentAutoUpdateBannerOnUnlock;
- (_Bool)presentAutoUpdateBanner;
- (id)currentDescriptor;
- (id)lastScannedDescriptor;
- (void)_autoDownloadWiFiPeriodDidEnd;
- (_Bool)_isDateWithinAutodownloadWifiWindow:(id)arg1;
- (_Bool)_isWithinAutodownloadWifiWindow;
- (void)_endAutodownloadTasksAndResetState:(_Bool)arg1;
- (void)endAutodownloadTasksAndResetState;
- (void)noteAutodownloadFailedToStartWithError:(id)arg1;
- (void)_endOrRescheduleAutodownloadRetryInOneDay:(id)arg1;
- (_Bool)_doAutodownload:(id)arg1 error:(id *)arg2;
- (void)_tryOrScheduleAutodownloadWithPolicy:(id)arg1 allowOneTimeRetry:(_Bool)arg2;
- (void)tryAutodownload;
- (void)autoScanAndDownloadIfAvailable:(int)arg1 withResult:(CDUnknownBlockType)arg2;
- (void)autoScanAndDownloadIfAvailable:(int)arg1;
- (void)_resumeFromLastKnownState;
- (void)_resumeInstalledUpdateOnUnlock;
- (_Bool)_initializeInstalledAsset:(id)arg1;
- (void)_setDownloadAssetFromDescriptorOnUnlock;
- (void)_setDownloadAssetFromDescriptor;
- (void)adoptPotentialSessionID;
- (void)createpotentialNextSessionID;
- (void)createSessionID;
- (void)resumeOrResetIfNecessary;
@property(nonatomic, getter=isDownloading) _Bool downloading; // @dynamic downloading;
- (void)removeObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (void)loadSavedState;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

