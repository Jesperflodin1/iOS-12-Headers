//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSXPCListenerDelegate-Protocol.h"

@class NSDate, NSMutableDictionary, NSString, NSUUID, NSXPCListener;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface IDSSimSupportLocalServer : NSObject <NSXPCListenerDelegate>
{
    _Bool _transportSuspended;
    NSUUID *_localDeviceUDID;
    NSMutableDictionary *_localConnections;
    NSMutableDictionary *_localConnectionsByServiceName;
    NSObject<OS_dispatch_queue> *_localConnectionsQueue;
    NSXPCListener *_localListener;
    NSMutableDictionary *_perClientServers;
    NSDate *_dateForNextDelayedData;
    NSObject<OS_dispatch_queue> *_sendQueue;
    NSObject<OS_dispatch_source> *_sendTimerSource;
    NSMutableDictionary *_outgoingMessages;
    NSObject<OS_dispatch_queue> *_receiveQueue;
    NSObject<OS_dispatch_source> *_receiveTimerSource;
    NSMutableDictionary *_receivedMessages;
    NSObject<OS_dispatch_queue> *_pairingStateQueue;
    NSUUID *_activeSimulatorID;
    NSObject<OS_dispatch_queue> *_remoteConnectionsQueue;
    NSMutableDictionary *_remoteConnections;
}

+ (id)sharedInstance;
@property(retain, nonatomic) NSMutableDictionary *remoteConnections; // @synthesize remoteConnections=_remoteConnections;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *remoteConnectionsQueue; // @synthesize remoteConnectionsQueue=_remoteConnectionsQueue;
@property _Bool transportSuspended; // @synthesize transportSuspended=_transportSuspended;
@property(copy) NSUUID *activeSimulatorID; // @synthesize activeSimulatorID=_activeSimulatorID;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *pairingStateQueue; // @synthesize pairingStateQueue=_pairingStateQueue;
@property(retain, nonatomic) NSMutableDictionary *receivedMessages; // @synthesize receivedMessages=_receivedMessages;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *receiveTimerSource; // @synthesize receiveTimerSource=_receiveTimerSource;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *receiveQueue; // @synthesize receiveQueue=_receiveQueue;
@property(retain, nonatomic) NSMutableDictionary *outgoingMessages; // @synthesize outgoingMessages=_outgoingMessages;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *sendTimerSource; // @synthesize sendTimerSource=_sendTimerSource;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *sendQueue; // @synthesize sendQueue=_sendQueue;
@property(retain) NSDate *dateForNextDelayedData; // @synthesize dateForNextDelayedData=_dateForNextDelayedData;
@property(retain, nonatomic) NSMutableDictionary *perClientServers; // @synthesize perClientServers=_perClientServers;
@property(retain) NSXPCListener *localListener; // @synthesize localListener=_localListener;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *localConnectionsQueue; // @synthesize localConnectionsQueue=_localConnectionsQueue;
@property(retain) NSMutableDictionary *localConnectionsByServiceName; // @synthesize localConnectionsByServiceName=_localConnectionsByServiceName;
@property(retain) NSMutableDictionary *localConnections; // @synthesize localConnections=_localConnections;
@property(retain, nonatomic) NSUUID *localDeviceUDID; // @synthesize localDeviceUDID=_localDeviceUDID;
- (void).cxx_destruct;
- (id)_resolveDestinationDeviceID:(id)arg1;
- (double)delayForDataOfLength:(unsigned long long)arg1;
- (_Bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)switchToActivePairedDeviceWithSimulatorID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deletePairedDeviceWithSimulatorID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)addPairedDeviceWithSimulatorID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)transportResumeWithCompletion:(CDUnknownBlockType)arg1;
- (void)transportSuspendWithCompletion:(CDUnknownBlockType)arg1;
- (void)transportDisconnectWithSimulatorID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)transportConnectWithSimulatorID:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (id)localConnectionsCopy;
- (id)localConnectionForService:(id)arg1;
- (void)unregisterPerClientServer:(id)arg1 forService:(id)arg2;
- (void)registerPerClientServer:(id)arg1 forService:(id)arg2;
- (void)getNetworkSimulationState:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setNetworkSimulation:(id)arg1 enabled:(_Bool)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_sendConnectionStateToClientsForSimulatorID:(id)arg1;
- (void)getCurrentConnectedSimulatorUniqueID:(CDUnknownBlockType)arg1;
- (void)getConnectionState:(CDUnknownBlockType)arg1;
- (unsigned long long)connectionStateForSimulatorID:(id)arg1;
- (id)_attemptToSendDataDict:(id)arg1 toDestination:(id)arg2;
- (void)_processSendQueue;
- (void)sendData:(id)arg1 withServiceName:(id)arg2 messageID:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)sendData:(id)arg1 toDevice:(id)arg2 withServiceName:(id)arg3 messageID:(id)arg4 completion:(CDUnknownBlockType)arg5;
- (void)handleControlTraffic:(id)arg1;
- (void)_reEnqueueReceivedMessage:(id)arg1 withServiceName:(id)arg2;
- (void)_processReceivedDataQueueForService:(id)arg1;
- (void)_processReceiveQueue;
- (void)receiveData:(id)arg1 withServiceName:(id)arg2 messageID:(id)arg3 senderDeviceID:(id)arg4;
- (void)suspend;
- (void)resume;
- (void)dealloc;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

